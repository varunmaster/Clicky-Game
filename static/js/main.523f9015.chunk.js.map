{"version":3,"sources":["components/ImgCard/index.js","components/Nav/index.js","App.js","index.js"],"names":["ImgCard","props","id","name","image","className","alt","src","onClick","handleImgClick","Nav","status","currentScore","highScore","children","App","state","simpsons","clicked","reorder","setState","randomize","array","i","length","j","Math","floor","random","includes","alert","resetGame","prevState","checkAndUpdateScore","handleWin","this","map","simpson","key","Component","ReactDOM","render","document","getElementById"],"mappings":"glDAYeA,MATf,SAAiBC,GAAQ,IACbC,EAAoBD,EAApBC,GAAIC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,MAClB,OACI,yBAAKC,UAAU,YACX,yBAAKC,IAAKH,EAAMI,IAAKH,EAAOF,GAAIA,EAAIM,QAAS,kBAAMP,EAAMQ,eAAeP,QCgBrEQ,MArBf,SAAaT,GACT,OACI,6BACI,yBAAKI,UAAU,+CACX,0BAAMA,UAAU,gBAAhB,eACA,yBAAKA,UAAU,sCACX,wBAAIA,UAAU,sBACV,wBAAIA,UAAU,gBACV,6CAAmBJ,EAAMU,OAAzB,OAGR,0BAAMN,UAAU,gBAAhB,kBACoBJ,EAAMW,aAD1B,kBACuDX,EAAMY,aAIpEZ,EAAMa,W,OCkFJC,G,iNA7FXC,MAAQ,CACJC,WACAL,aAAc,EACdC,UAAW,EACXK,QAAS,I,EAGbC,QAAU,WAGN,EAAKC,SAAS,CAAEH,SAAU,EAAKI,UAAUJ,M,EAK7CI,UAAY,SAAAC,GACR,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACvC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADH,EAEhB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFgC,KAE5BD,EAAMG,GAFsB,KAI3C,OAAOH,G,EAOXb,eAAiB,SAAAP,GACT,EAAKc,MAAME,QAAQW,SAAS3B,IAC5B4B,MAAM,aACN,EAAKC,aAEL,EAAKX,UAAS,SAAAY,GAAS,MAAK,CACxBd,QAAQ,GAAD,mBAAMc,EAAUd,SAAhB,CAAyBhB,IAChCU,aAAc,EAAKI,MAAMJ,aAAe,EACxCK,SAAU,EAAKI,UAAUJ,OACzB,WACA,EAAKgB,sBACL,EAAKC,gB,mFAdbC,KAAKf,SAAS,CAAEH,SAAUkB,KAAKd,UAAUJ,O,kCAoBzCkB,KAAKf,SAAS,CACVH,SAAUkB,KAAKd,UAAUJ,GACzBC,QAAS,GACTN,aAAc,M,4CAKfuB,KAAKnB,MAAME,QAAQM,OAASW,KAAKnB,MAAMH,WACtCsB,KAAKf,SAAS,CAAEP,UAAWsB,KAAKnB,MAAME,QAAQM,W,kCAK9CW,KAAKnB,MAAMJ,eAAiBuB,KAAKnB,MAAMC,SAASO,SAChDM,MAAM,cACNK,KAAKJ,e,+BAIH,IAAD,SAC+BI,KAAKnB,MAAjCJ,EADH,EACGA,aAAcC,EADjB,EACiBA,UACtB,OACI,kBAAE,EAAF,CAAMD,aAAcA,EAAcC,UAAWA,GACzC,6BACI,yBAAKR,UAAU,yCACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,aAAd,eACA,uBAAGA,UAAU,QAAb,8CAGR,yBAAKA,UAAU,qBACV8B,KAAKnB,MAAMC,SAASmB,KAAI,SAAAC,GAAO,OAC5B,kBAAC,EAAD,CACIlB,QAAS,EAAKA,QACdjB,GAAImC,EAAQnC,GACZoC,IAAKD,EAAQnC,GACbC,KAAMkC,EAAQlC,KACdC,MAAOiC,EAAQjC,MACfK,eAAgB,EAAKA,2B,GApFnC8B,cCDlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.523f9015.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction ImgCard(props) {\n    const { id, name, image } = props\n    return (\n        <div className=\"col-md-3\">\n            <img alt={name} src={image} id={id} onClick={() => props.handleImgClick(id)}/>\n        </div>\n    );\n}\n\nexport default ImgCard;\n","import React from \"react\";\n\nfunction Nav(props) {\n    return (\n        <div>\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n                <span className=\"navbar-brand\">Clicky-Game</span>\n                <div className=\"container collapse navbar-collapse\" >\n                    <ul className=\"navbar-nav mr-auto\">\n                        <li className=\"navbar-brand\">\n                            <span>You guessed {props.status}!</span>\n                        </li>\n                    </ul>\n                    <span className=\"navbar-brand\">\n                        Current Score: {props.currentScore} | High Score: {props.highScore}\n                    </span>\n                </div>\n            </nav>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Nav;\n","import React, { Component } from \"react\";\nimport ImgCard from \"./components/ImgCard\";\nimport Nav from \"./components/Nav\"\nimport simpsons from \"./simpsons.json\";\nimport \"./style.css\";\n\nclass App extends Component {\n    state = {\n        simpsons,\n        currentScore: 0,\n        highScore: 0,\n        clicked: []\n    };\n\n    reorder = () => {\n        // const simpsons = this.state.simpsons\n        // this.setState({ simpsons });\n        this.setState({ simpsons: this.randomize(simpsons) });\n        // this.randomize(simpsons);\n    };\n\n    //TODO: find a way to randomize the image\n    randomize = array => {\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]]; //this is not a 2D array\n        }\n        return array;\n    };\n\n    componentDidMount() {\n        this.setState({ simpsons: this.randomize(simpsons) });\n    };\n\n    handleImgClick = id => {\n        if (this.state.clicked.includes(id)) {\n            alert(\"You Lost!\");\n            this.resetGame();\n        } else {\n            this.setState(prevState => ({\n                clicked: [...prevState.clicked, id],\n                currentScore: this.state.currentScore + 1,\n                simpsons: this.randomize(simpsons)\n            }), () => {\n                this.checkAndUpdateScore();\n                this.handleWin();\n            });\n        }\n    };\n\n    resetGame() {\n        this.setState({\n            simpsons: this.randomize(simpsons),\n            clicked: [],\n            currentScore: 0\n        });\n    };\n\n    checkAndUpdateScore() {\n        if(this.state.clicked.length > this.state.highScore) {\n            this.setState({ highScore: this.state.clicked.length });\n        }\n    }\n\n    handleWin() {\n        if (this.state.currentScore === this.state.simpsons.length){\n            alert(\"You Won!!!\");\n            this.resetGame();\n        }\n    };\n\n    render() {\n        const { currentScore, highScore } = this.state;\n        return (\n            < Nav currentScore={currentScore} highScore={highScore} >\n                <div>\n                    <div className=\"jumbotron jumbotron-fluid text-center\">\n                        <div className=\"container\">\n                            <h1 className=\"display-1\">Memory Game</h1>\n                            <p className=\"lead\">Only click on an image once or you lose!</p>\n                        </div>\n                    </div>\n                    <div className=\"row img-container\">\n                        {this.state.simpsons.map(simpson => (\n                            <ImgCard\n                                reorder={this.reorder}\n                                id={simpson.id}\n                                key={simpson.id}\n                                name={simpson.name}\n                                image={simpson.image}\n                                handleImgClick={this.handleImgClick}\n                            />\n                        ))}\n                    </div>\n                </div>\n            </Nav >\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}